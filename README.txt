# Распаковка позиционных параметров

**Описание**:

В данном проекте рассматривается задача «Распаковка», которая включает в себя создание функции с параметрами по умолчанию, распаковку параметров и использование распаковки вместе с отдельными параметрами.

## Функция с параметрами по умолчанию

Создаётся функция print_params(a = 1, b = 'строка', c = True), которая принимает три параметра со значениями по умолчанию (например сейчас это: 1, 'строка', True). Функция должна выводить эти параметры.

Вызываем функцию print_params с разным количеством аргументов, включая вызов без аргументов. Проверяем, работают ли вызовы print_params(b = 25) и print_params(c = [1,2,3]).

Пример использования:
```python
def print_params(a=1, b='строка', c=True):
    print(f'a={a}, b={b}, c={c}')

print_params()  # a=1, b='строка', c=True
print_params(25)  # a=1, b=25, c=True
print_params([1, 2, 3])  # a=1, b=[1, 2, 3], c=True
```

## Распаковка параметров

Создаём список values_list с тремя элементами разных типов. Создаём словарь values_dict с тремя ключами, соответствующими параметрам функции print_params, и значениями разных типов. Передаём values_list и values_dict в функцию print_params, используя распаковку параметров (* для списка и ** для словаря).

Пример использования:
```python
values_list = [10, 'string', False]
values_dict = {'a': 42, 'b': 'another string', 'c': False}

def print_params(*args, **kwargs):
    for arg in args:
        print(arg)
    for key, value in kwargs.items():
        print(key, '=', value)

print_params(*values_list, **values_dict)
```

## Распаковка + отдельные параметры

Создаём список values_list_2 с двумя элементами разных типов. Проверяем, работает ли print_params(*values_list_2, 42).